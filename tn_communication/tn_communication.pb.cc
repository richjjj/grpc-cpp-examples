// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: tn_communication.proto

#include "tn_communication.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>

PROTOBUF_PRAGMA_INIT_SEG
namespace tn_communication {
constexpr AddRequest::AddRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : addend_1_(0)
  , addend_2_(0){}
struct AddRequestDefaultTypeInternal {
  constexpr AddRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddRequestDefaultTypeInternal() {}
  union {
    AddRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddRequestDefaultTypeInternal _AddRequest_default_instance_;
constexpr AddResponse::AddResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : sum_(int64_t{0}){}
struct AddResponseDefaultTypeInternal {
  constexpr AddResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~AddResponseDefaultTypeInternal() {}
  union {
    AddResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT AddResponseDefaultTypeInternal _AddResponse_default_instance_;
constexpr SubRequest::SubRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : minuend_(0)
  , subtrahend_(0){}
struct SubRequestDefaultTypeInternal {
  constexpr SubRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubRequestDefaultTypeInternal() {}
  union {
    SubRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubRequestDefaultTypeInternal _SubRequest_default_instance_;
constexpr SubResponse::SubResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : difference_(int64_t{0}){}
struct SubResponseDefaultTypeInternal {
  constexpr SubResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~SubResponseDefaultTypeInternal() {}
  union {
    SubResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT SubResponseDefaultTypeInternal _SubResponse_default_instance_;
constexpr MulRequest::MulRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : multiplicand_(0)
  , multiplier_(0){}
struct MulRequestDefaultTypeInternal {
  constexpr MulRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MulRequestDefaultTypeInternal() {}
  union {
    MulRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MulRequestDefaultTypeInternal _MulRequest_default_instance_;
constexpr MulResponse::MulResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : product_(int64_t{0}){}
struct MulResponseDefaultTypeInternal {
  constexpr MulResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~MulResponseDefaultTypeInternal() {}
  union {
    MulResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT MulResponseDefaultTypeInternal _MulResponse_default_instance_;
constexpr DivRequest::DivRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dividend_(0)
  , divisor_(0){}
struct DivRequestDefaultTypeInternal {
  constexpr DivRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DivRequestDefaultTypeInternal() {}
  union {
    DivRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DivRequestDefaultTypeInternal _DivRequest_default_instance_;
constexpr DivResponse::DivResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : quotient_(int64_t{0}){}
struct DivResponseDefaultTypeInternal {
  constexpr DivResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~DivResponseDefaultTypeInternal() {}
  union {
    DivResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT DivResponseDefaultTypeInternal _DivResponse_default_instance_;
constexpr ModRequest::ModRequest(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : dividend_(0)
  , divisor_(0){}
struct ModRequestDefaultTypeInternal {
  constexpr ModRequestDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModRequestDefaultTypeInternal() {}
  union {
    ModRequest _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModRequestDefaultTypeInternal _ModRequest_default_instance_;
constexpr ModResponse::ModResponse(
  ::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized)
  : result_(int64_t{0}){}
struct ModResponseDefaultTypeInternal {
  constexpr ModResponseDefaultTypeInternal()
    : _instance(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized{}) {}
  ~ModResponseDefaultTypeInternal() {}
  union {
    ModResponse _instance;
  };
};
PROTOBUF_ATTRIBUTE_NO_DESTROY PROTOBUF_CONSTINIT ModResponseDefaultTypeInternal _ModResponse_default_instance_;
}  // namespace tn_communication
static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_tn_5fcommunication_2eproto[10];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_tn_5fcommunication_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_tn_5fcommunication_2eproto = nullptr;

const uint32_t TableStruct_tn_5fcommunication_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tn_communication::AddRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tn_communication::AddRequest, addend_1_),
  PROTOBUF_FIELD_OFFSET(::tn_communication::AddRequest, addend_2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tn_communication::AddResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tn_communication::AddResponse, sum_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tn_communication::SubRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tn_communication::SubRequest, minuend_),
  PROTOBUF_FIELD_OFFSET(::tn_communication::SubRequest, subtrahend_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tn_communication::SubResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tn_communication::SubResponse, difference_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tn_communication::MulRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tn_communication::MulRequest, multiplicand_),
  PROTOBUF_FIELD_OFFSET(::tn_communication::MulRequest, multiplier_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tn_communication::MulResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tn_communication::MulResponse, product_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tn_communication::DivRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tn_communication::DivRequest, dividend_),
  PROTOBUF_FIELD_OFFSET(::tn_communication::DivRequest, divisor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tn_communication::DivResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tn_communication::DivResponse, quotient_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tn_communication::ModRequest, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tn_communication::ModRequest, dividend_),
  PROTOBUF_FIELD_OFFSET(::tn_communication::ModRequest, divisor_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::tn_communication::ModResponse, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  ~0u,  // no _inlined_string_donated_
  PROTOBUF_FIELD_OFFSET(::tn_communication::ModResponse, result_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, -1, sizeof(::tn_communication::AddRequest)},
  { 8, -1, -1, sizeof(::tn_communication::AddResponse)},
  { 15, -1, -1, sizeof(::tn_communication::SubRequest)},
  { 23, -1, -1, sizeof(::tn_communication::SubResponse)},
  { 30, -1, -1, sizeof(::tn_communication::MulRequest)},
  { 38, -1, -1, sizeof(::tn_communication::MulResponse)},
  { 45, -1, -1, sizeof(::tn_communication::DivRequest)},
  { 53, -1, -1, sizeof(::tn_communication::DivResponse)},
  { 60, -1, -1, sizeof(::tn_communication::ModRequest)},
  { 68, -1, -1, sizeof(::tn_communication::ModResponse)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tn_communication::_AddRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tn_communication::_AddResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tn_communication::_SubRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tn_communication::_SubResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tn_communication::_MulRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tn_communication::_MulResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tn_communication::_DivRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tn_communication::_DivResponse_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tn_communication::_ModRequest_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::tn_communication::_ModResponse_default_instance_),
};

const char descriptor_table_protodef_tn_5fcommunication_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\026tn_communication.proto\022\020tn_communicati"
  "on\"0\n\nAddRequest\022\020\n\010addend_1\030\001 \001(\005\022\020\n\010ad"
  "dend_2\030\002 \001(\005\"\032\n\013AddResponse\022\013\n\003sum\030\001 \001(\003"
  "\"1\n\nSubRequest\022\017\n\007minuend\030\001 \001(\005\022\022\n\nsubtr"
  "ahend\030\002 \001(\005\"!\n\013SubResponse\022\022\n\ndifference"
  "\030\001 \001(\003\"6\n\nMulRequest\022\024\n\014multiplicand\030\001 \001"
  "(\005\022\022\n\nmultiplier\030\002 \001(\005\"\036\n\013MulResponse\022\017\n"
  "\007product\030\001 \001(\003\"/\n\nDivRequest\022\020\n\010dividend"
  "\030\001 \001(\005\022\017\n\007divisor\030\002 \001(\005\"\037\n\013DivResponse\022\020"
  "\n\010quotient\030\001 \001(\003\"/\n\nModRequest\022\020\n\010divide"
  "nd\030\001 \001(\005\022\017\n\007divisor\030\002 \001(\005\"\035\n\013ModResponse"
  "\022\016\n\006result\030\001 \001(\0032\357\002\n\017TNCommunication\022D\n\003"
  "Add\022\034.tn_communication.AddRequest\032\035.tn_c"
  "ommunication.AddResponse\"\000\022D\n\003Sub\022\034.tn_c"
  "ommunication.SubRequest\032\035.tn_communicati"
  "on.SubResponse\"\000\022D\n\003Mul\022\034.tn_communicati"
  "on.MulRequest\032\035.tn_communication.MulResp"
  "onse\"\000\022D\n\003Div\022\034.tn_communication.DivRequ"
  "est\032\035.tn_communication.DivResponse\"\000\022D\n\003"
  "Mod\022\034.tn_communication.ModRequest\032\035.tn_c"
  "ommunication.ModResponse\"\000b\006proto3"
  ;
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_tn_5fcommunication_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_tn_5fcommunication_2eproto = {
  false, false, 834, descriptor_table_protodef_tn_5fcommunication_2eproto, "tn_communication.proto", 
  &descriptor_table_tn_5fcommunication_2eproto_once, nullptr, 0, 10,
  schemas, file_default_instances, TableStruct_tn_5fcommunication_2eproto::offsets,
  file_level_metadata_tn_5fcommunication_2eproto, file_level_enum_descriptors_tn_5fcommunication_2eproto, file_level_service_descriptors_tn_5fcommunication_2eproto,
};
PROTOBUF_ATTRIBUTE_WEAK const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable* descriptor_table_tn_5fcommunication_2eproto_getter() {
  return &descriptor_table_tn_5fcommunication_2eproto;
}

// Force running AddDescriptors() at dynamic initialization time.
PROTOBUF_ATTRIBUTE_INIT_PRIORITY static ::PROTOBUF_NAMESPACE_ID::internal::AddDescriptorsRunner dynamic_init_dummy_tn_5fcommunication_2eproto(&descriptor_table_tn_5fcommunication_2eproto);
namespace tn_communication {

// ===================================================================

class AddRequest::_Internal {
 public:
};

AddRequest::AddRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tn_communication.AddRequest)
}
AddRequest::AddRequest(const AddRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&addend_1_, &from.addend_1_,
    static_cast<size_t>(reinterpret_cast<char*>(&addend_2_) -
    reinterpret_cast<char*>(&addend_1_)) + sizeof(addend_2_));
  // @@protoc_insertion_point(copy_constructor:tn_communication.AddRequest)
}

inline void AddRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&addend_1_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&addend_2_) -
    reinterpret_cast<char*>(&addend_1_)) + sizeof(addend_2_));
}

AddRequest::~AddRequest() {
  // @@protoc_insertion_point(destructor:tn_communication.AddRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddRequest::ArenaDtor(void* object) {
  AddRequest* _this = reinterpret_cast< AddRequest* >(object);
  (void)_this;
}
void AddRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tn_communication.AddRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&addend_1_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&addend_2_) -
      reinterpret_cast<char*>(&addend_1_)) + sizeof(addend_2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 addend_1 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          addend_1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 addend_2 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          addend_2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tn_communication.AddRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 addend_1 = 1;
  if (this->_internal_addend_1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_addend_1(), target);
  }

  // int32 addend_2 = 2;
  if (this->_internal_addend_2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_addend_2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tn_communication.AddRequest)
  return target;
}

size_t AddRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tn_communication.AddRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 addend_1 = 1;
  if (this->_internal_addend_1() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_addend_1());
  }

  // int32 addend_2 = 2;
  if (this->_internal_addend_2() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_addend_2());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddRequest::GetClassData() const { return &_class_data_; }

void AddRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddRequest *>(to)->MergeFrom(
      static_cast<const AddRequest &>(from));
}


void AddRequest::MergeFrom(const AddRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tn_communication.AddRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_addend_1() != 0) {
    _internal_set_addend_1(from._internal_addend_1());
  }
  if (from._internal_addend_2() != 0) {
    _internal_set_addend_2(from._internal_addend_2());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddRequest::CopyFrom(const AddRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tn_communication.AddRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddRequest::IsInitialized() const {
  return true;
}

void AddRequest::InternalSwap(AddRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(AddRequest, addend_2_)
      + sizeof(AddRequest::addend_2_)
      - PROTOBUF_FIELD_OFFSET(AddRequest, addend_1_)>(
          reinterpret_cast<char*>(&addend_1_),
          reinterpret_cast<char*>(&other->addend_1_));
}

::PROTOBUF_NAMESPACE_ID::Metadata AddRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tn_5fcommunication_2eproto_getter, &descriptor_table_tn_5fcommunication_2eproto_once,
      file_level_metadata_tn_5fcommunication_2eproto[0]);
}

// ===================================================================

class AddResponse::_Internal {
 public:
};

AddResponse::AddResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tn_communication.AddResponse)
}
AddResponse::AddResponse(const AddResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  sum_ = from.sum_;
  // @@protoc_insertion_point(copy_constructor:tn_communication.AddResponse)
}

inline void AddResponse::SharedCtor() {
sum_ = int64_t{0};
}

AddResponse::~AddResponse() {
  // @@protoc_insertion_point(destructor:tn_communication.AddResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void AddResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void AddResponse::ArenaDtor(void* object) {
  AddResponse* _this = reinterpret_cast< AddResponse* >(object);
  (void)_this;
}
void AddResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void AddResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void AddResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tn_communication.AddResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  sum_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* AddResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 sum = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          sum_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* AddResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tn_communication.AddResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 sum = 1;
  if (this->_internal_sum() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_sum(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tn_communication.AddResponse)
  return target;
}

size_t AddResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tn_communication.AddResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 sum = 1;
  if (this->_internal_sum() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_sum());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData AddResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    AddResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*AddResponse::GetClassData() const { return &_class_data_; }

void AddResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<AddResponse *>(to)->MergeFrom(
      static_cast<const AddResponse &>(from));
}


void AddResponse::MergeFrom(const AddResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tn_communication.AddResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_sum() != 0) {
    _internal_set_sum(from._internal_sum());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void AddResponse::CopyFrom(const AddResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tn_communication.AddResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddResponse::IsInitialized() const {
  return true;
}

void AddResponse::InternalSwap(AddResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(sum_, other->sum_);
}

::PROTOBUF_NAMESPACE_ID::Metadata AddResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tn_5fcommunication_2eproto_getter, &descriptor_table_tn_5fcommunication_2eproto_once,
      file_level_metadata_tn_5fcommunication_2eproto[1]);
}

// ===================================================================

class SubRequest::_Internal {
 public:
};

SubRequest::SubRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tn_communication.SubRequest)
}
SubRequest::SubRequest(const SubRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&minuend_, &from.minuend_,
    static_cast<size_t>(reinterpret_cast<char*>(&subtrahend_) -
    reinterpret_cast<char*>(&minuend_)) + sizeof(subtrahend_));
  // @@protoc_insertion_point(copy_constructor:tn_communication.SubRequest)
}

inline void SubRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&minuend_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&subtrahend_) -
    reinterpret_cast<char*>(&minuend_)) + sizeof(subtrahend_));
}

SubRequest::~SubRequest() {
  // @@protoc_insertion_point(destructor:tn_communication.SubRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubRequest::ArenaDtor(void* object) {
  SubRequest* _this = reinterpret_cast< SubRequest* >(object);
  (void)_this;
}
void SubRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tn_communication.SubRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&minuend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&subtrahend_) -
      reinterpret_cast<char*>(&minuend_)) + sizeof(subtrahend_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 minuend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          minuend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 subtrahend = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          subtrahend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tn_communication.SubRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 minuend = 1;
  if (this->_internal_minuend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_minuend(), target);
  }

  // int32 subtrahend = 2;
  if (this->_internal_subtrahend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_subtrahend(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tn_communication.SubRequest)
  return target;
}

size_t SubRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tn_communication.SubRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 minuend = 1;
  if (this->_internal_minuend() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_minuend());
  }

  // int32 subtrahend = 2;
  if (this->_internal_subtrahend() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_subtrahend());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubRequest::GetClassData() const { return &_class_data_; }

void SubRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubRequest *>(to)->MergeFrom(
      static_cast<const SubRequest &>(from));
}


void SubRequest::MergeFrom(const SubRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tn_communication.SubRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_minuend() != 0) {
    _internal_set_minuend(from._internal_minuend());
  }
  if (from._internal_subtrahend() != 0) {
    _internal_set_subtrahend(from._internal_subtrahend());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubRequest::CopyFrom(const SubRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tn_communication.SubRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubRequest::IsInitialized() const {
  return true;
}

void SubRequest::InternalSwap(SubRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(SubRequest, subtrahend_)
      + sizeof(SubRequest::subtrahend_)
      - PROTOBUF_FIELD_OFFSET(SubRequest, minuend_)>(
          reinterpret_cast<char*>(&minuend_),
          reinterpret_cast<char*>(&other->minuend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata SubRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tn_5fcommunication_2eproto_getter, &descriptor_table_tn_5fcommunication_2eproto_once,
      file_level_metadata_tn_5fcommunication_2eproto[2]);
}

// ===================================================================

class SubResponse::_Internal {
 public:
};

SubResponse::SubResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tn_communication.SubResponse)
}
SubResponse::SubResponse(const SubResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  difference_ = from.difference_;
  // @@protoc_insertion_point(copy_constructor:tn_communication.SubResponse)
}

inline void SubResponse::SharedCtor() {
difference_ = int64_t{0};
}

SubResponse::~SubResponse() {
  // @@protoc_insertion_point(destructor:tn_communication.SubResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void SubResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void SubResponse::ArenaDtor(void* object) {
  SubResponse* _this = reinterpret_cast< SubResponse* >(object);
  (void)_this;
}
void SubResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SubResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void SubResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tn_communication.SubResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  difference_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SubResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 difference = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          difference_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* SubResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tn_communication.SubResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 difference = 1;
  if (this->_internal_difference() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_difference(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tn_communication.SubResponse)
  return target;
}

size_t SubResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tn_communication.SubResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 difference = 1;
  if (this->_internal_difference() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_difference());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData SubResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    SubResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*SubResponse::GetClassData() const { return &_class_data_; }

void SubResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<SubResponse *>(to)->MergeFrom(
      static_cast<const SubResponse &>(from));
}


void SubResponse::MergeFrom(const SubResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tn_communication.SubResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_difference() != 0) {
    _internal_set_difference(from._internal_difference());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void SubResponse::CopyFrom(const SubResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tn_communication.SubResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SubResponse::IsInitialized() const {
  return true;
}

void SubResponse::InternalSwap(SubResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(difference_, other->difference_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SubResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tn_5fcommunication_2eproto_getter, &descriptor_table_tn_5fcommunication_2eproto_once,
      file_level_metadata_tn_5fcommunication_2eproto[3]);
}

// ===================================================================

class MulRequest::_Internal {
 public:
};

MulRequest::MulRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tn_communication.MulRequest)
}
MulRequest::MulRequest(const MulRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&multiplicand_, &from.multiplicand_,
    static_cast<size_t>(reinterpret_cast<char*>(&multiplier_) -
    reinterpret_cast<char*>(&multiplicand_)) + sizeof(multiplier_));
  // @@protoc_insertion_point(copy_constructor:tn_communication.MulRequest)
}

inline void MulRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&multiplicand_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&multiplier_) -
    reinterpret_cast<char*>(&multiplicand_)) + sizeof(multiplier_));
}

MulRequest::~MulRequest() {
  // @@protoc_insertion_point(destructor:tn_communication.MulRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MulRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MulRequest::ArenaDtor(void* object) {
  MulRequest* _this = reinterpret_cast< MulRequest* >(object);
  (void)_this;
}
void MulRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MulRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MulRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tn_communication.MulRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&multiplicand_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&multiplier_) -
      reinterpret_cast<char*>(&multiplicand_)) + sizeof(multiplier_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MulRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 multiplicand = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          multiplicand_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 multiplier = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          multiplier_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MulRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tn_communication.MulRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 multiplicand = 1;
  if (this->_internal_multiplicand() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_multiplicand(), target);
  }

  // int32 multiplier = 2;
  if (this->_internal_multiplier() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_multiplier(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tn_communication.MulRequest)
  return target;
}

size_t MulRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tn_communication.MulRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 multiplicand = 1;
  if (this->_internal_multiplicand() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_multiplicand());
  }

  // int32 multiplier = 2;
  if (this->_internal_multiplier() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_multiplier());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MulRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MulRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MulRequest::GetClassData() const { return &_class_data_; }

void MulRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MulRequest *>(to)->MergeFrom(
      static_cast<const MulRequest &>(from));
}


void MulRequest::MergeFrom(const MulRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tn_communication.MulRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_multiplicand() != 0) {
    _internal_set_multiplicand(from._internal_multiplicand());
  }
  if (from._internal_multiplier() != 0) {
    _internal_set_multiplier(from._internal_multiplier());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MulRequest::CopyFrom(const MulRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tn_communication.MulRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MulRequest::IsInitialized() const {
  return true;
}

void MulRequest::InternalSwap(MulRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(MulRequest, multiplier_)
      + sizeof(MulRequest::multiplier_)
      - PROTOBUF_FIELD_OFFSET(MulRequest, multiplicand_)>(
          reinterpret_cast<char*>(&multiplicand_),
          reinterpret_cast<char*>(&other->multiplicand_));
}

::PROTOBUF_NAMESPACE_ID::Metadata MulRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tn_5fcommunication_2eproto_getter, &descriptor_table_tn_5fcommunication_2eproto_once,
      file_level_metadata_tn_5fcommunication_2eproto[4]);
}

// ===================================================================

class MulResponse::_Internal {
 public:
};

MulResponse::MulResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tn_communication.MulResponse)
}
MulResponse::MulResponse(const MulResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  product_ = from.product_;
  // @@protoc_insertion_point(copy_constructor:tn_communication.MulResponse)
}

inline void MulResponse::SharedCtor() {
product_ = int64_t{0};
}

MulResponse::~MulResponse() {
  // @@protoc_insertion_point(destructor:tn_communication.MulResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void MulResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void MulResponse::ArenaDtor(void* object) {
  MulResponse* _this = reinterpret_cast< MulResponse* >(object);
  (void)_this;
}
void MulResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MulResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void MulResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tn_communication.MulResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  product_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MulResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 product = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          product_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* MulResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tn_communication.MulResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 product = 1;
  if (this->_internal_product() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_product(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tn_communication.MulResponse)
  return target;
}

size_t MulResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tn_communication.MulResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 product = 1;
  if (this->_internal_product() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_product());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData MulResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    MulResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*MulResponse::GetClassData() const { return &_class_data_; }

void MulResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<MulResponse *>(to)->MergeFrom(
      static_cast<const MulResponse &>(from));
}


void MulResponse::MergeFrom(const MulResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tn_communication.MulResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_product() != 0) {
    _internal_set_product(from._internal_product());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void MulResponse::CopyFrom(const MulResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tn_communication.MulResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MulResponse::IsInitialized() const {
  return true;
}

void MulResponse::InternalSwap(MulResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(product_, other->product_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MulResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tn_5fcommunication_2eproto_getter, &descriptor_table_tn_5fcommunication_2eproto_once,
      file_level_metadata_tn_5fcommunication_2eproto[5]);
}

// ===================================================================

class DivRequest::_Internal {
 public:
};

DivRequest::DivRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tn_communication.DivRequest)
}
DivRequest::DivRequest(const DivRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dividend_, &from.dividend_,
    static_cast<size_t>(reinterpret_cast<char*>(&divisor_) -
    reinterpret_cast<char*>(&dividend_)) + sizeof(divisor_));
  // @@protoc_insertion_point(copy_constructor:tn_communication.DivRequest)
}

inline void DivRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dividend_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&divisor_) -
    reinterpret_cast<char*>(&dividend_)) + sizeof(divisor_));
}

DivRequest::~DivRequest() {
  // @@protoc_insertion_point(destructor:tn_communication.DivRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DivRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DivRequest::ArenaDtor(void* object) {
  DivRequest* _this = reinterpret_cast< DivRequest* >(object);
  (void)_this;
}
void DivRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DivRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DivRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tn_communication.DivRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dividend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&divisor_) -
      reinterpret_cast<char*>(&dividend_)) + sizeof(divisor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DivRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 dividend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          dividend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 divisor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          divisor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DivRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tn_communication.DivRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dividend = 1;
  if (this->_internal_dividend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dividend(), target);
  }

  // int32 divisor = 2;
  if (this->_internal_divisor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_divisor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tn_communication.DivRequest)
  return target;
}

size_t DivRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tn_communication.DivRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dividend = 1;
  if (this->_internal_dividend() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dividend());
  }

  // int32 divisor = 2;
  if (this->_internal_divisor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_divisor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DivRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DivRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DivRequest::GetClassData() const { return &_class_data_; }

void DivRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DivRequest *>(to)->MergeFrom(
      static_cast<const DivRequest &>(from));
}


void DivRequest::MergeFrom(const DivRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tn_communication.DivRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dividend() != 0) {
    _internal_set_dividend(from._internal_dividend());
  }
  if (from._internal_divisor() != 0) {
    _internal_set_divisor(from._internal_divisor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DivRequest::CopyFrom(const DivRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tn_communication.DivRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DivRequest::IsInitialized() const {
  return true;
}

void DivRequest::InternalSwap(DivRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(DivRequest, divisor_)
      + sizeof(DivRequest::divisor_)
      - PROTOBUF_FIELD_OFFSET(DivRequest, dividend_)>(
          reinterpret_cast<char*>(&dividend_),
          reinterpret_cast<char*>(&other->dividend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata DivRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tn_5fcommunication_2eproto_getter, &descriptor_table_tn_5fcommunication_2eproto_once,
      file_level_metadata_tn_5fcommunication_2eproto[6]);
}

// ===================================================================

class DivResponse::_Internal {
 public:
};

DivResponse::DivResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tn_communication.DivResponse)
}
DivResponse::DivResponse(const DivResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  quotient_ = from.quotient_;
  // @@protoc_insertion_point(copy_constructor:tn_communication.DivResponse)
}

inline void DivResponse::SharedCtor() {
quotient_ = int64_t{0};
}

DivResponse::~DivResponse() {
  // @@protoc_insertion_point(destructor:tn_communication.DivResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void DivResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void DivResponse::ArenaDtor(void* object) {
  DivResponse* _this = reinterpret_cast< DivResponse* >(object);
  (void)_this;
}
void DivResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void DivResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void DivResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tn_communication.DivResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  quotient_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* DivResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 quotient = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          quotient_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* DivResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tn_communication.DivResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 quotient = 1;
  if (this->_internal_quotient() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_quotient(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tn_communication.DivResponse)
  return target;
}

size_t DivResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tn_communication.DivResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 quotient = 1;
  if (this->_internal_quotient() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_quotient());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData DivResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    DivResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*DivResponse::GetClassData() const { return &_class_data_; }

void DivResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<DivResponse *>(to)->MergeFrom(
      static_cast<const DivResponse &>(from));
}


void DivResponse::MergeFrom(const DivResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tn_communication.DivResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_quotient() != 0) {
    _internal_set_quotient(from._internal_quotient());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void DivResponse::CopyFrom(const DivResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tn_communication.DivResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DivResponse::IsInitialized() const {
  return true;
}

void DivResponse::InternalSwap(DivResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(quotient_, other->quotient_);
}

::PROTOBUF_NAMESPACE_ID::Metadata DivResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tn_5fcommunication_2eproto_getter, &descriptor_table_tn_5fcommunication_2eproto_once,
      file_level_metadata_tn_5fcommunication_2eproto[7]);
}

// ===================================================================

class ModRequest::_Internal {
 public:
};

ModRequest::ModRequest(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tn_communication.ModRequest)
}
ModRequest::ModRequest(const ModRequest& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&dividend_, &from.dividend_,
    static_cast<size_t>(reinterpret_cast<char*>(&divisor_) -
    reinterpret_cast<char*>(&dividend_)) + sizeof(divisor_));
  // @@protoc_insertion_point(copy_constructor:tn_communication.ModRequest)
}

inline void ModRequest::SharedCtor() {
::memset(reinterpret_cast<char*>(this) + static_cast<size_t>(
    reinterpret_cast<char*>(&dividend_) - reinterpret_cast<char*>(this)),
    0, static_cast<size_t>(reinterpret_cast<char*>(&divisor_) -
    reinterpret_cast<char*>(&dividend_)) + sizeof(divisor_));
}

ModRequest::~ModRequest() {
  // @@protoc_insertion_point(destructor:tn_communication.ModRequest)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModRequest::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModRequest::ArenaDtor(void* object) {
  ModRequest* _this = reinterpret_cast< ModRequest* >(object);
  (void)_this;
}
void ModRequest::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModRequest::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModRequest::Clear() {
// @@protoc_insertion_point(message_clear_start:tn_communication.ModRequest)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&dividend_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&divisor_) -
      reinterpret_cast<char*>(&dividend_)) + sizeof(divisor_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModRequest::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int32 dividend = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          dividend_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      // int32 divisor = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 16)) {
          divisor_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint32(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModRequest::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tn_communication.ModRequest)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 dividend = 1;
  if (this->_internal_dividend() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_dividend(), target);
  }

  // int32 divisor = 2;
  if (this->_internal_divisor() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_divisor(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tn_communication.ModRequest)
  return target;
}

size_t ModRequest::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tn_communication.ModRequest)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 dividend = 1;
  if (this->_internal_dividend() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_dividend());
  }

  // int32 divisor = 2;
  if (this->_internal_divisor() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32SizePlusOne(this->_internal_divisor());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModRequest::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModRequest::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModRequest::GetClassData() const { return &_class_data_; }

void ModRequest::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModRequest *>(to)->MergeFrom(
      static_cast<const ModRequest &>(from));
}


void ModRequest::MergeFrom(const ModRequest& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tn_communication.ModRequest)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_dividend() != 0) {
    _internal_set_dividend(from._internal_dividend());
  }
  if (from._internal_divisor() != 0) {
    _internal_set_divisor(from._internal_divisor());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModRequest::CopyFrom(const ModRequest& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tn_communication.ModRequest)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModRequest::IsInitialized() const {
  return true;
}

void ModRequest::InternalSwap(ModRequest* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(ModRequest, divisor_)
      + sizeof(ModRequest::divisor_)
      - PROTOBUF_FIELD_OFFSET(ModRequest, dividend_)>(
          reinterpret_cast<char*>(&dividend_),
          reinterpret_cast<char*>(&other->dividend_));
}

::PROTOBUF_NAMESPACE_ID::Metadata ModRequest::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tn_5fcommunication_2eproto_getter, &descriptor_table_tn_5fcommunication_2eproto_once,
      file_level_metadata_tn_5fcommunication_2eproto[8]);
}

// ===================================================================

class ModResponse::_Internal {
 public:
};

ModResponse::ModResponse(::PROTOBUF_NAMESPACE_ID::Arena* arena,
                         bool is_message_owned)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena, is_message_owned) {
  SharedCtor();
  if (!is_message_owned) {
    RegisterArenaDtor(arena);
  }
  // @@protoc_insertion_point(arena_constructor:tn_communication.ModResponse)
}
ModResponse::ModResponse(const ModResponse& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  result_ = from.result_;
  // @@protoc_insertion_point(copy_constructor:tn_communication.ModResponse)
}

inline void ModResponse::SharedCtor() {
result_ = int64_t{0};
}

ModResponse::~ModResponse() {
  // @@protoc_insertion_point(destructor:tn_communication.ModResponse)
  if (GetArenaForAllocation() != nullptr) return;
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

inline void ModResponse::SharedDtor() {
  GOOGLE_DCHECK(GetArenaForAllocation() == nullptr);
}

void ModResponse::ArenaDtor(void* object) {
  ModResponse* _this = reinterpret_cast< ModResponse* >(object);
  (void)_this;
}
void ModResponse::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void ModResponse::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}

void ModResponse::Clear() {
// @@protoc_insertion_point(message_clear_start:tn_communication.ModResponse)
  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  result_ = int64_t{0};
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* ModResponse::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  while (!ctx->Done(&ptr)) {
    uint32_t tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    switch (tag >> 3) {
      // int64 result = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<uint8_t>(tag) == 8)) {
          result_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else
          goto handle_unusual;
        continue;
      default:
        goto handle_unusual;
    }  // switch
  handle_unusual:
    if ((tag == 0) || ((tag & 7) == 4)) {
      CHK_(ptr);
      ctx->SetLastTag(tag);
      goto message_done;
    }
    ptr = UnknownFieldParse(
        tag,
        _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
        ptr, ctx);
    CHK_(ptr != nullptr);
  }  // while
message_done:
  return ptr;
failure:
  ptr = nullptr;
  goto message_done;
#undef CHK_
}

uint8_t* ModResponse::_InternalSerialize(
    uint8_t* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:tn_communication.ModResponse)
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  // int64 result = 1;
  if (this->_internal_result() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt64ToArray(1, this->_internal_result(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:tn_communication.ModResponse)
  return target;
}

size_t ModResponse::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:tn_communication.ModResponse)
  size_t total_size = 0;

  uint32_t cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int64 result = 1;
  if (this->_internal_result() != 0) {
    total_size += ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int64SizePlusOne(this->_internal_result());
  }

  return MaybeComputeUnknownFieldsSize(total_size, &_cached_size_);
}

const ::PROTOBUF_NAMESPACE_ID::Message::ClassData ModResponse::_class_data_ = {
    ::PROTOBUF_NAMESPACE_ID::Message::CopyWithSizeCheck,
    ModResponse::MergeImpl
};
const ::PROTOBUF_NAMESPACE_ID::Message::ClassData*ModResponse::GetClassData() const { return &_class_data_; }

void ModResponse::MergeImpl(::PROTOBUF_NAMESPACE_ID::Message* to,
                      const ::PROTOBUF_NAMESPACE_ID::Message& from) {
  static_cast<ModResponse *>(to)->MergeFrom(
      static_cast<const ModResponse &>(from));
}


void ModResponse::MergeFrom(const ModResponse& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:tn_communication.ModResponse)
  GOOGLE_DCHECK_NE(&from, this);
  uint32_t cached_has_bits = 0;
  (void) cached_has_bits;

  if (from._internal_result() != 0) {
    _internal_set_result(from._internal_result());
  }
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
}

void ModResponse::CopyFrom(const ModResponse& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:tn_communication.ModResponse)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ModResponse::IsInitialized() const {
  return true;
}

void ModResponse::InternalSwap(ModResponse* other) {
  using std::swap;
  _internal_metadata_.InternalSwap(&other->_internal_metadata_);
  swap(result_, other->result_);
}

::PROTOBUF_NAMESPACE_ID::Metadata ModResponse::GetMetadata() const {
  return ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(
      &descriptor_table_tn_5fcommunication_2eproto_getter, &descriptor_table_tn_5fcommunication_2eproto_once,
      file_level_metadata_tn_5fcommunication_2eproto[9]);
}

// @@protoc_insertion_point(namespace_scope)
}  // namespace tn_communication
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::tn_communication::AddRequest* Arena::CreateMaybeMessage< ::tn_communication::AddRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tn_communication::AddRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tn_communication::AddResponse* Arena::CreateMaybeMessage< ::tn_communication::AddResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tn_communication::AddResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tn_communication::SubRequest* Arena::CreateMaybeMessage< ::tn_communication::SubRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tn_communication::SubRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tn_communication::SubResponse* Arena::CreateMaybeMessage< ::tn_communication::SubResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tn_communication::SubResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tn_communication::MulRequest* Arena::CreateMaybeMessage< ::tn_communication::MulRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tn_communication::MulRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tn_communication::MulResponse* Arena::CreateMaybeMessage< ::tn_communication::MulResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tn_communication::MulResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tn_communication::DivRequest* Arena::CreateMaybeMessage< ::tn_communication::DivRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tn_communication::DivRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tn_communication::DivResponse* Arena::CreateMaybeMessage< ::tn_communication::DivResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tn_communication::DivResponse >(arena);
}
template<> PROTOBUF_NOINLINE ::tn_communication::ModRequest* Arena::CreateMaybeMessage< ::tn_communication::ModRequest >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tn_communication::ModRequest >(arena);
}
template<> PROTOBUF_NOINLINE ::tn_communication::ModResponse* Arena::CreateMaybeMessage< ::tn_communication::ModResponse >(Arena* arena) {
  return Arena::CreateMessageInternal< ::tn_communication::ModResponse >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
